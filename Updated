

(require string-sexpr)
(require racket/string)
(require 2htdp/image)
(require 2htdp/universe)

;; A History is one of
;;  -- '()
;;  -- (cons Chat History)

;; A Chat is one of
;;  -- (list "MSG" String [list-of String] String)
;;  -- (list "JOIN" String)
;;  -- (list "EXIT" String)
;;  -- (list "ERROR" String)
;;  -- (list "EMOTICON" String String String)
;;  -- (list "CODE" String PD*)
;;  -- (list "STATUS" [Listof String])
;;  -- (list "NAME" String String)

;; A MSG is a (list "MSG" String [list-of String] String)

;; A Command is one of
;;  -- String
;;  -- (list "COLOR" String)
;;  -- (list "BLACKLIST" String)
;;  -- (list "WHITELIST" String)
;;  -- (list "WHITELIST" String)
;;  -- (list "URL" String String)
;;  -- (list "CODE" PD*)
;;  -- "STATUS"
;; -- (list "NAME" String)

;; Interpretation:
;;    Plain String is a normal message
;;    "!color cs" changes user's color to cs with the "COLOR" command
;;    "!block n" blocks user n with the "BLACKLIST" command
;;    "!friend n" allows n to send emoticons
;;    "!emote s u" sends an emoticon wherever the string is detected
;;    "!pd* pd*" sends the interpreted image of pd*
;;        To send "CODE" commands, use !pd* and then the image to be implemented
;;        (ie text should be a string such as "hello" and image should be what
;;        the command would normally be, such as (rectangle 10 20 "solid" "red")
;;    "!status" sends a list of all active members in server
;;    "!name s" changes your public name to s

; A PD* (short for picture description) is one of:
; – 'empty-image 
; – String 
; – (list 'circle Number String String)
; – (list 'rectangle Number Number String String)
; – (list 'beside LPD*)
; – (list 'above LPD*)

; An LPD* is one of: 
; – '()
; – (cons PD* LPD*)

; A Circle is a (circle Number String String)

; A Rectangle is a (rectangle Number Number String String

; A Beside is a (beside LPD*)

; An Above is a (above LPD*)

(define-struct emote [word image])
;; An Emote is a (make-emote String Image)
;; word is the plaintext word to be replaced
;; image is the image with which to replace word

(define-struct chatclient [history current emotes names])
;; A Chatclient is a (make-chatclient History String [list-of Emote])

(define-struct names [real public])
;; A Name is a (make-name String String)

; -------------------- Constants --------------------

(define CHAT-HEIGHT 400)
(define WIDTH 800)
(define INPUT-HEIGHT 50)
(define CHAT-HISTORY (empty-scene WIDTH CHAT-HEIGHT))
(define INPUT-BOX (empty-scene WIDTH INPUT-HEIGHT))
(define EMPTY (above CHAT-HISTORY INPUT-BOX))
(define CLIENT-WINDOW (empty-scene WIDTH (+ CHAT-HEIGHT INPUT-HEIGHT)))
(define SERVER "dictionary.ccs.neu.edu")
(define PORT 10001)
(define NAMES "larios.r:5653+valluru.m:1411")
(define test-url "http://simpleicon.com/wp-content/uploads/smile.png")

(define pd*1 'empty-image)
(define pd*2 "nice")
(define pd*3 (list 'circle 10 "solid" "red"))
(define pd*4 (list 'rectangle 20 10 "solid" "green"))
(define pd*5 (list 'beside (cons pd*3 (cons pd*4 (cons pd*2 '())))))
(define pd*6 (list 'above (cons pd*2 (cons pd*4 '()))))

(define em (make-emote "testword" (text "TESTIMG" 20 "orange")))
(define ch1 (list "MSG" "Bob" (list "Hi" "how" "are" "you" "ajdsad") "Purple"))
(define ch2 (list "JOIN" "Jim has entered"))
(define ch3 (list "EXIT" "Tim has left"))
(define ch4 (list "ERROR" "ERROR: Bad message"))
(define ch5 (list "MSG" "David" (list "test" "message" "hi") "green"))
(define ch6 (list "EMOTICON" "Larry" "Larry"
                  "http://simpleicon.com/wp-content/uploads/smile.png"))
(define ch7 (list "MSG" "Larry" (list "testword" "hi") "black"))
(define ch8
  (list "CODE" "larios.r+mahitha.v" "(circle 10 \"solid\" \"red\" "))
(define ch9 (list "STATUS" '("Rikki" "Mahitha" "Matthias")))
(define ch10 (list "NAME" "Mahitha" "Rikki"))

(define cmd1 "This is a normal message")
(define cmd2 (list "COLOR" "blue"))
(define cmd3 (list "BLACKLIST" "Bob"))
(define cmd4 (list "URL" "word" "www.example.com"))
(define cmd5 (list "WHITELIST" "Larry"))
(define cmd6 (list "CODE" '(circle 10 "solid" "red")))
(define cmd7 "STATUS")
(define cmd8 (list "NAME" "RandM"))

(define testcc (make-chatclient (list ch4 ch5) "asdf"
                                (list em) (list (make-names "R" "M"))))

(define BLANK (make-chatclient '() "" '() '()))

;-------------------------------------------------------------------------------

;; client: Chatclient -> Chatclient
;; Chat client that communicates with SERVER

(define (client cc)
  (big-bang cc
            [register SERVER]
            [port PORT]
            [name NAMES]
            [on-receive msg-receive]
            [on-key key-press]
            [to-draw draw-window]))

;; msg-receive: Chatclient Chat -> Chatclient
;; Receive a message and add new message to chat history
;; Updates emojis and nicknames if applicable

(check-expect (msg-receive testcc ch1)
              (make-chatclient (cons ch1 (chatclient-history testcc))
                               (chatclient-current testcc)
                               (chatclient-emotes testcc)
                               (chatclient-names testcc)))
(check-expect (msg-receive testcc ch6)
              (make-chatclient (cons ch6 (chatclient-history testcc))
                               (chatclient-current testcc)
                               (cons (make-emote "Larry" (bitmap/url test-url))
                                     (list em))
                               (chatclient-names testcc)))
(check-expect (msg-receive testcc ch10)
              (make-chatclient (cons ch10 (chatclient-history testcc))
                               (chatclient-current testcc)
                               (chatclient-emotes testcc)
                               (list (make-names "Mahitha" "Rikki")
                                     (make-names "R" "M"))))
(check-expect (msg-receive testcc (list "NAME" "R" "Rikki"))
              (make-chatclient (cons (list "NAME" "R" "Rikki")
                                     (chatclient-history testcc))
                               (chatclient-current testcc)
                               (chatclient-emotes testcc)
                               (list (make-names "R" "Rikki"))))

(define (msg-receive cc msg)
  (cond
    [(string=? (first msg) "EMOTICON")
     (make-chatclient
      (cons msg (chatclient-history cc))
      (chatclient-current cc)
      (cons (make-emote (third msg) (bitmap/url (fourth msg)))
            (chatclient-emotes cc))
      (chatclient-names cc))]
    [(string=? (first msg) "NAME")
     (make-chatclient
      (cons msg (chatclient-history cc))
      (chatclient-current cc)
      (chatclient-emotes cc)
      (local ((define real (second msg))
              (define public (third msg))
              (define new-name (make-names real public))
              ; [List-of Name] String [List-of Name]
              ; Checks for previous nickname change and updates list accordingly
              ; ACCUMULATOR keeps track of previously checked names
              ; given (list (make-name "Rikki" "R")) "M"
              ; want (list (make-name "M" "publicname") (make-name "Rikki" "R"))
              ; given (list (make-name "M" "N") (make-name "S" Q")) "S"
              ; want (list (make-name "M" "N") (make-name "S" "new-nickname"))
              (define (change-nickname lon real-n a)
                (cond
                  [(empty? lon) (cons new-name (reverse a))]
                  [(and (empty? a) (empty? (rest lon)))
                   (if (string=? (names-real (first lon)) real-n)
                       (cons new-name a)
                       (cons new-name (cons (first lon) '())))]
                  [else (if (string=? (names-real (first lon)) real-n)
                            (cons (reverse a)
                                  (cons new-name (rest lon)))
                            (change-nickname (rest lon) real-n
                                             (cons (first lon) a)))])))
        (change-nickname (chatclient-names cc) real '())))]
    [else (make-chatclient
           (cons msg (chatclient-history cc))
           (chatclient-current cc)
           (chatclient-emotes cc)
           (chatclient-names cc))]))

;; send-command: String -> Command
;; Reads a String c and sends an appropriate Command to server

(check-expect (send-command "!color blue") cmd2)
(check-expect (send-command "This is a normal message") cmd1)
(check-expect (send-command "!block Bob") cmd3)
(check-expect (send-command "!emote word www.example.com") cmd4)
(check-expect (send-command "!friend Larry") cmd5)
(check-expect (send-command "!pd* (circle 10 \"solid\" \"red\")") cmd6)
(check-expect (send-command "!pd* \"hello\"")
              (list "CODE" (string->sexpr "\"hello\"")))
(check-expect (send-command
               "!pd* (above ((circle 10 \"solid\" \"red\")
(circle 20 \"solid\" \"green\")))")
              (list "CODE" (string->sexpr "(above ((circle 10 \"solid\" \"red\")
(circle 20 \"solid\" \"green\")))")))
(check-expect (send-command "!status") "STATUS")
(check-expect (send-command "!name Elvis")
              (list "NAME" "Elvis"))

(define (send-command c)
  (cond [(not (string=? "!" (substring c 0 1)))
         c]
        [(string=? "!color" (substring c 0 6))
         (list "COLOR" (substring c 7))]
        [(string=? "!block" (substring c 0 6))
         (list "BLACKLIST" (substring c 7))]
        [(string=? "!friend" (substring c 0 7))
         (list "WHITELIST" (substring c 8))]
        [(string=? "!emote" (substring c 0 6))
         (url-command (string-split c))]
        [(string=? "!pd*" (substring c 0 4))
         (list "CODE" (string->sexpr (substring c 5)))]
        [(string=? "!status" (substring c 0 7))
         "STATUS"]
        [(string=? "!name" (substring c 0 5))
         (list "NAME" (substring c 6))]))

;; url-command: [list-of String] -> Command
;; Turns a split up URL command string into a Command
;; Expects String split by str-split as input

(check-expect (url-command (str-split
                            (explode "!emote testword www.example.com")
                            0
                            (list "" "" "")))
              (list "URL" "testword" "www.example.com"))

(define (url-command los)
  (list "URL" (second los) (third los)))

;; str-split: [list-of String] Number [list-of String] -> [list-of String]
;; Splits an exploded string up by spaces
;; (Attempt at implementing string-split from racket/string)

(check-expect (str-split (explode "!emote testword www.example.com")
                         0 (list "" "" ""))
              (list "!emote" "testword" "www.example.com"))

(define (str-split los i res)
  (cond [(empty? los) res]
        [(string=? " " (first los)) (str-split (rest los) (add1 i) res)]
        [else (str-split (rest los) i
                         (cond [(= i 0)
                                (list (string-append (first res) (first los))
                                      (second res) (third res))]
                               [(= i 1)
                                (list (first res)
                                      (string-append (second res) (first los))
                                      (third res))]
                               [(= i 2)
                                (list (first res) (second res)
                                      (string-append (third res) (first los)))]
                               [else (list (first res)
                                           (second res) (third res))]))]))

;; key-press: Chatclient KeyEvent -> Chatclient
;; On KeyEvent, adds all 1Strings to the current message being typed
;;      If key is "\b", backspaces on current message being typed
;;      If key is "\r", sends current message to server

(check-expect (key-press testcc "\b")
              (make-chatclient (chatclient-history testcc)
                               "asd"
                               (chatclient-emotes testcc)
                               (chatclient-names testcc)))
(check-expect (key-press BLANK "\b") BLANK)


(check-expect (key-press testcc "\r")
              (make-package (make-chatclient (chatclient-history testcc)
                                             ""
                                             (chatclient-emotes testcc)
                                             (chatclient-names testcc))
                            "asdf"))
(check-expect (key-press testcc "g")
              (make-chatclient (chatclient-history testcc)
                               (string-append (chatclient-current testcc) "g")
                               (chatclient-emotes testcc)
                               (chatclient-names testcc)))
(check-expect (key-press testcc "shift") testcc)
(check-expect (key-press (make-chatclient (list ch4 ch5)
                                          "!color blue"
                                          (chatclient-emotes testcc)
                                          (chatclient-names testcc)) "\r")
              (make-package (make-chatclient (list ch4 ch5)
                                             ""
                                             (chatclient-emotes testcc)
                                             (chatclient-names testcc))
                            (list "COLOR" "blue")))
(check-expect (key-press (make-chatclient (list ch4 ch5)
                                          "!block bob"
                                          (chatclient-emotes testcc)
                                          (chatclient-names testcc)) "\r")
              (make-package (make-chatclient (list ch4 ch5) ""
                                             (chatclient-emotes testcc)
                                             (chatclient-names testcc))
                            (list "BLACKLIST" "bob")))

(define (key-press cc key)
  (cond
    [(string=? "\b" key)
     (if (not (= (string-length (chatclient-current cc)) 0))
         (make-chatclient
          (chatclient-history cc)
          (substring (chatclient-current cc)
                     0 (- (string-length (chatclient-current cc)) 1))
          (chatclient-emotes cc)
          (chatclient-names cc))
         cc)]
    [(and (string=? "\r" key) (> (string-length (chatclient-current cc)) 0))
     (make-package (make-chatclient (chatclient-history cc)
                                    ""
                                    (chatclient-emotes cc)
                                    (chatclient-names cc))
                   (send-command (chatclient-current cc)))]
    [(and (= (string-length key) 1) (not (string=? key "\r")))
     (make-chatclient (chatclient-history cc)
                      (string-append (chatclient-current cc) key)
                      (chatclient-emotes cc)
                      (chatclient-names cc))]
    [else cc]))


;; draw-history: History [list-of Emote] [List-of Name] -> Image
;; Builds the chat history window

(check-expect (draw-history (list ch5) (list em) '())
              (above/align "left" empty-image
                           (text "David: test message hi" 20 "green")))

(define (draw-history h emotes names)
  (cond
    [(empty? h) empty-image]
    [else (above/align "left"
                       (draw-history (rest h) emotes names)
                       (draw-chat (first h) emotes names))]))

;; draw-chat: Chat [list-of Emote] [List-of Name] -> Image
;; Draws a Chat. If user changed nickname previously, sends from public name

(check-expect (draw-chat ch5 (list em) '())
              (text "David: test message hi" 20 "green"))
(check-expect (draw-chat ch4 (list em) '())
              (text "ERROR: Bad message" 20 "red"))
(check-expect (draw-chat ch6 (list em) '())
              (text "Larry has replaced Larry" 20 "black"))
(check-expect (draw-chat ch2 (list em) '())
              (text "Jim has entered joined." 20 "chartreuse"))
(check-expect (draw-chat ch3 (list em) '())
              (text "Tim has left left." 20 "chartreuse"))
(check-expect (draw-chat ch8 (list em) '())
              (beside (text (string-append (second ch8) ":") 20 "black")
                      (pd*-interpret (third ch8))))
(check-expect (draw-chat ch9 (list em) '())
              (above (text "Rikki" 20 "red")
                     (text "Mahitha" 20 "red")
                     (text "Matthias" 20 "red")))
(check-expect (draw-chat ch10 (list em) '())
              (text "Mahitha is now Rikki" 20 "orange"))
(check-expect (draw-chat (list "MSG" "Rikki" '("hello" "there") "crimson")
                         (list em) (list (make-names "Rikki" "Plzwork")))
              (beside (text "Plzwork:" 20 "crimson")
                      (text " hello there" 20 "crimson")))

(define (draw-chat c emotes names-list)
  (cond
    [(string=? (first c) "MSG")
     (local (; String List-of Name -> Image
             ; Determines how to represent a users name if changed before
             ; given "Rikki" (list (make-name "Rikki" "R"))
             ; want (beside (text "R:" ...))
             ; given "Mahitha" (list)
             ; want (beside (text "Mahitha:" ...))
             (define (change-name user names-list)
               (cond
                 [(empty? names-list)
                  (beside (text (string-append user ":") 20 (fourth c))
                          (draw-msg c emotes))]
                 [else (if (string=? user (names-real (first names-list)))
                           (beside (text
                                    (string-append (names-public
                                                    (first names-list)) ":")
                                    20 (fourth c))
                                   (draw-msg c emotes))
                           (change-name user (rest names-list)))])))
       (change-name (second c) names-list))]
    [(string=? (first c) "JOIN")
     (text (string-append (second c) " joined.") 20 "chartreuse")]
    [(string=? (first c) "EXIT")
     (text (string-append (second c) " left.") 20 "chartreuse")]
    [(string=? (first c) "ERROR")
     (text (second c) 20 "red")]
    [(string=? (first c) "EMOTICON")
     (text (string-append (second c) " has replaced " (third c))
           20 "black")]
    [(string=? (first c) "CODE")
     (beside (text (string-append (second c) ":") 20 "black")
             (pd*-interpret (third c)))]
    [(string=? (first c) "STATUS")
     (foldr above empty-image
            (map (lambda (name) (text name 20 "red")) (second c)))]
    [(string=? (first c) "NAME")
     (text (string-append (second c) " is now " (third c)) 20 "orange")]))


;; draw-msg: MSG [list-of Emote] -> Image
;; Draws a MSG, accounting for Emote replacements

(check-expect (draw-msg ch5 (list em)) (text " test message hi" 20 "green"))
(check-expect (draw-msg ch7 (list em))
              (beside (text " " 20 "black")
                      (scale (/ 20 23) (text "TESTIMG" 20 "orange"))
                      (text " hi" 20 "black")))

(define (draw-msg m emotes)
  (cond [(empty? (third m)) empty-image]
        [else (beside (text " " 20 "black")
                      (emote-in (first (third m))
                                emotes
                                (fourth m))
                      (draw-msg (list (first m)
                                      (second m)
                                      (rest (third m))
                                      (fourth m))
                                emotes))]))

;; emote-in: String [list-of Emote] -> Image
;; Gets the Emote associated with word
;; Otherwise, returns word as an image

(check-expect (emote-in "testword" (list em) "blue")
              (scale (/ 20 23) (text "TESTIMG" 20 "orange")))
(check-expect (emote-in "asdf" (list em) "blue")
              (text "asdf" 20 "blue"))

(define (emote-in word emotes color)
  (cond [(empty? emotes) (text word 20 color)]
        [else
         (if (string=? word (emote-word (first emotes)))
             (scale (/ 20 (image-height (emote-image (first emotes))))
                    (emote-image (first emotes)))
             (emote-in word (rest emotes) color))]))

;; draw-window: Chatclient -> image
;; Creates a window to display chat history and input box

(check-expect (draw-window BLANK)
              (place-image/align
               (above/align "left" empty-image (text "" 20 "black"))
               0 CHAT-HEIGHT "left" "bottom"
               (place-image/align
                (place-image/align (text "" 20 "black")
                                   0 (/ INPUT-HEIGHT 2) "left" "center"
                                   INPUT-BOX)
                0 CHAT-HEIGHT "left" "top" CLIENT-WINDOW)))
(check-expect (draw-window testcc)
              (place-image/align
               (above/align "left" empty-image
                            (text "David: test message hi " 20 "green")
                            (text "ERROR: Bad message" 20 "red"))
               0 CHAT-HEIGHT "left" "bottom"
               (place-image/align
                (place-image/align (text "asdf" 20 "black")
                                   0 (/ INPUT-HEIGHT 2) "left" "center"
                                   INPUT-BOX)
                0 CHAT-HEIGHT "left" "top" CLIENT-WINDOW)))

(define (draw-window cc)
  (place-image/align (draw-history (chatclient-history cc)
                                   (chatclient-emotes cc)
                                   (chatclient-names cc))
                     0 CHAT-HEIGHT "left" "bottom"
                     (place-image/align
                      (place-image/align
                       (text (chatclient-current cc) 20 "black")
                       0 (/ INPUT-HEIGHT 2) "left" "center" INPUT-BOX)
                      0 CHAT-HEIGHT "left" "top" CLIENT-WINDOW)))

; pd*-interpret: PD* -> Image
; Renders the image of the given PD* or multiple images if given LPD*

(check-expect (pd*-interpret pd*1)
              empty-image)
(check-expect (pd*-interpret pd*2)
              (text "nice" 12 "blue"))
(check-expect (pd*-interpret pd*3)
              (circle 10 "solid" "red"))
(check-expect (pd*-interpret pd*4)
              (rectangle 20 10 "solid" "green"))
(check-expect (pd*-interpret pd*5)
              (beside
               (circle 10 "solid" "red")
               (rectangle 20 10 "solid" "green")
               (text "nice" 12 "blue")))
(check-expect (pd*-interpret pd*6)
              (above
               (text "nice" 12 "blue")
               (rectangle 20 10 "solid" "green")))

(define (pd*-interpret a-pd*)
  (local
    ((define (empty-image? i) (symbol? i))
     (define (circle? i) (and (cons? i) (symbol=? (first i) 'circle)))
     (define (rectangle? i) (and (cons? i) (symbol=? (first i) 'rectangle)))
     (define (beside? i) (and (cons? i) (symbol=? (first i) 'beside)))
     (define (above? i) (and (cons? i) (symbol=? (first i) 'above)))
     
     (define circle-radius second)
     (define circle-mode third)
     (define circle-color fourth)
     
     (define rectangle-width second)
     (define rectangle-height third)
     (define rectangle-mode fourth)
     (define rectangle-color fifth)
     
     (define beside-list second)
     
     (define above-list second)
     ; make-a-circle: PD* -> Circle
     ; Renders image of a circle if given proper PD*
     (define (make-a-circle a-pd*)
       (circle (circle-radius a-pd*)
               (circle-mode a-pd*)
               (circle-color a-pd*)))
     ; make-a-rectangle: PD* -> Rectangle
     ; Renders image of a rectangle if given proper PD*
     (define (make-a-rectangle a-pd*)
       (rectangle (rectangle-width a-pd*)
                  (rectangle-height a-pd*)
                  (rectangle-mode a-pd*)
                  (rectangle-color a-pd*)))     
     ; for-lpd*: LPD* -> Image
     ; Renders image of multiple PD* if LPD* begins with 'beside     
     (define (for-lpd* lpd*)
       (cond
         [(empty? lpd*) empty-image]
         [(cons? lpd*)
          (cond
            [(equal? (first lpd*) 'beside)
             (foldr beside empty-image
                    (map pd*-interpret (beside-list lpd*)))]
            [(equal? (first lpd*) 'above)
             (foldr above empty-image
                    (map pd*-interpret (above-list lpd*)))])])))
    (cond
      [(empty-image? a-pd*) empty-image]
      [(string? a-pd*) (text a-pd* 12 "blue")]
      [(circle? a-pd*) (make-a-circle a-pd*)]
      [(rectangle? a-pd*) (make-a-rectangle a-pd*)]
      [(beside? a-pd*) (for-lpd* a-pd*)]
      [(above? a-pd*) (for-lpd* a-pd*)])))
